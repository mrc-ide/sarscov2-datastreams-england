
####        Documentation for modifying fitting parameters      #######

For each of model_type BB and NB, set of assumptions, and deterministic TRUE/FALSE
we have a set of pMCMC parameters with their initial values and
variance-covariance matrix. These correspond to files 
`info.csv` and `proposal.csv` available in 
`src/rtm_parameters_fits/pars/`.

These parameters are both input and output of the process of fitting the RTM
model to incoming data. They are thus rapidly changing. For each set of "good"
fits to the data, parameter outputs will need manually updating in the respective
folder where they are contained (see 1. Updating fit parameters). 

For adding new parameters or removing dated ones, there are a number of helper
functions available in
`global/rtm_inference/helper_add_parameter.R`.

These will be referred to throughout this README file. Keep in mind that,
conditional to using any of any of such functions, you will need to make sure
your working directory is the root of your repo and that you source out global
utilities (i.e. run lines 1 and 2 in the helper functions script).

Common to all helper functions are the following arguments and defaults:
    - type = "bb" - For model type beta binomial or "nb" for negative binomial
    - where = "central/" - For set of assumptions (VE, cross-immunity, etc.) 
        central, pessimistic or central_short_si, as well as any that are 
        incorporated in the future
    - deterministic = FALSE - For stochastic model, or TRUE for deterministic 
        model.
        
This file discuss the parent task - the restart task uses the same system of
files to handle parameters and proposal matrix.

--- 1. Updating fit parameters ---

This is a manual process. After running either of parent
(`rtm_spim_fits_combined`) or restart (`rtm_spim_restart_fits_combined`)
combined tasks, you will have an updated info.csv and proposal.csv in your task
report `outputs/parameters/`. These correspond to the posterior values and tuned
VCV matrix for the fitted parameters.

To use these values as initial values for the next model run:
    a. Copy these two files only (i.e. ignore the third file, `prior.csv`,
        which specifically contains the prior distribution for these parameters)
    b. Locate the corresponding folder in `src/rtm_parameters_fits/pars` (e.g.
        `multi/central/bb` if you ran the restart combined for the BB model 
        with central assumptions).
    c. Paste (replace) the files
    
Good practice tips:
    - Repeat this process as many times as necessary when fine-tuning your 
      model parameters
    - Only use outputs from a long model run (short runs are generally for
      developing code, not tuning parameters or VCV matrices)
    - If you update fitted parameters and aim to merge to master, document the
      orderly IDs that correspond to your fitted parameters! Add these on the
      spreadsheet available in the Teams channel "orderly ids" and notify
      Rich FitzJohn so they can be uploaded to the server.
      


--- 2. Removing parameters ---

a. Remove from info/proposal files
See function `remove_parameter()`. Added to the three common arguments (see 
above), it takes `name` argument, a string specifying the name of the parameter
to be removed.

b. Remove from rtm_parameters_fits/R files
Check throughout in `src/rtm_parameters_fits/R/`, especially in `baseline.R`,
`priors.R` and `transform.R` for where the name of the parameter appears and
delete throughout.

Good practice tips:
    - Always remember to remove the parameter from all R scripts and
      the info/proposal files where it exists
    - When using the helper function, bear in mind some parameters are unique
      to specific model types, assumption sets, etc.
    - After removing a parameter, develop/run the parameters and fitting tasks
      locally to make sure the pipeline works as expected



--- 3. Adding a new beta changepoint ---

a. Add in rtm_parameters_fits/R files
The new date for the beta changepoint needs to be added to the `beta_date` list
within the `create_baseline` function in baseline.R.
It will also need a prior. In priors.R locate the section on
betas and either add it by increasing the number in the `rep` vector for 
`beta_hps` or by estimating a completely new prior distribution.
In the example above you would have changed:
    beta_hps <- beta_hps[c("beta1", "beta2", rep("beta3", 3), ]
for:
    beta_hps <- beta_hps[c("beta1", "beta2", rep("beta3", 4), ]
Note that, at the time of this documentation, we have 29 betas. New betas will
likely be of the "`beta19` prior class". This means that, from beta19 onward
there is a common prior distribution being used to create the vector beta_hps.
Should a new prior distribution be needed in the future (e.g. greater 
transmission advantage of a new VOC - crap!), for example, at the 35th beta:
    ## beta35 aim for 95% CI of [0.9, 6.9]
    beta_hps["beta35", ] <- fit_gamma(mean_D = 4.1,
                                      lower_D = 0.9,
                                      upper_D = 6.9,
                                      ci = 0.95)
    beta_hps["beta35", "scale"] <- beta_hps["beta35", "scale"] * R0_fac
    beta_hps <-
        beta_hps[c("beta1", "beta2", rep("beta3", 16), rep("beta19", 16),
                    "beta35"), ]

b. Add in info/proposal files
See helper functions 'add_beta()` and `rename_parameter()`.
If the new beta is intermediate to two existing betas, first rename the betas
that will now come after the new one. Added to the three common arguments (see
above), `rename_parameter()` takes an old_name and new_name argument. For
example, if five change points exist and a new one will be added between the
current fourth and fifth:
    rename_parameter(old_name = "beta5", new_name = "beta6", ...)
You will now proceed to use `add_beta()`, which takes the additional arguments
beta_name (name for the beta to be added), beta_initial (value to take as
initial prior from an existing beta), min / max (prior distribution), proposal
(an initial value for the VCV matrix).
In the example above:
    add_beta(beta_name = "beta5", beta_initial = "beta4", min = 0, max = 1,
    proposal = NULL, ...)
Note that if proposal = NULL, the function will average out the diagonal
values for beta_initial for all regions in the existing VCV matrix. This is fine
as a default.

Good practice tips:
    - Always add a new beta to all info/proposal files where is needed.
    - Where possible, open a specific spimalot PR for a new beta; remember to
      bump the package version and update version checks along the whole
      fitting pipeline. 
    - After adding a parameter, develop/run the parameters and fitting tasks
      locally to make sure the pipeline works as expected.
      


--- 3. Adding changepoints to other time-varying parameters ---

At the time of write up, the model has the following fitted time-varying
parameters: p_H, p_ICU, mu_D and mu_gamma_H. The first three are severity
parameters for the probability of hospitalisation conditional on symptomatic
disease, probability of ICU conditional on hospital admission and time to death.
The latter a progression parameter for the duration of hospital stay, affecting
only only stays (either to recovery of death) for those remaining outside of
the ICU. Note these parameters need both a value and date declared.

a. Add in spimalot
At the time of write up, the spimalot functions where these parameters exists 
are not in use. This is likely to change soon, as the rtm_parameter_fits/R
files are packaged into spimalot.

b. Add in info/proposal files
See helper function `add_parameter()`, which takes the additional arguments
name, initial, min, max, proposal, integer and include. The latter two have
defaults set to TRUE and FALSE, respectively. These do not need to be changed.
Name, initial, min, max and proposal, will be used as in the case of adding a
beta (see above). Note that in this case, proposal can be either numeric so
assign a calculated value or a string. In case of the latter, the string must
correspond to the name of an existing fitted parameter to base the VCV proposal
for the new one. IF, for example, a latest p_H_5 will be fitted based on the
previous p_H_4:
      add_parameter(name = "p_H_5", min = 0, max = 1, proposal = "p_H_4")

c. Add in rtm_parameters_fits/R files
To add a prior, look for the section on `prior.R` where similar parameters
are being declared. This is usually within a strings vector, as most of
these time-varying parameters have flat priors.
They will also need adding as `expected` values for the `create_baseline` and
`make_transform` functions in baseline.R and transform.R, respectively.
Lastly, p_H, p_ICU and mu_D parameters will need declaring as `expected` values, 
assigning to a vector of values for sircovid and a `date` given in the 
`compute_severity` function in transform.R. Similarly, mu_gamma_H parameters
need the same checks in the `compute_progression` function in transform.R.
